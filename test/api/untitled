var moment = require("moment");

var ApiWrapper = require("../../lib/api-wrapper");

describe("lib/api-wrapper", function () {
  var startString = "20140101";
  var endString = "20140105";

  var momStart = moment(startString, "YYYYMMDD");
  var momEnd = moment(endString, "YYYYMMDD");

  var isoBetween1 = momStart.toISOString();
  var isoBetween2 = momEnd.endOf("day").toISOString();
  var isoBetween3 = moment("20140105", "YYYYMMDD").toISOString();

  var isoNotBetween1 = moment("20140106", "YYYYMMDD").toISOString();
  var isoNotBetween2 = moment("2013", "YYYY").endOf("year").toISOString();

  var apiWrapper = new ApiWrapper({
    config: {
      reportSettings: {
        startDate: startString,
        endDate: endString
      }
    }
  });

  describe("ApiWrapper", function () {
    it("instance should have moment start date at begging of start date",
      function () {
        expect(apiWrapper.startDate).to.deep.equal(momStart.startOf("day"));
      });

    it("instance should have moment end date at last moment of day",
      function () {
        expect(apiWrapper.endDate).to.deep.equal(momEnd.endOf("day"));
      });
  });

  describe("_inPeriod", function () {
    it("should return true for dates in between start and end inclusive",
      function () {
        expect(apiWrapper._inPeriod(isoBetween1)).to.be.true;
        expect(apiWrapper._inPeriod(isoBetween2)).to.be.true;
        expect(apiWrapper._inPeriod(isoBetween3)).to.be.true;
      });

    it("should return false for dates not between start and end inclusive",
      function () {
        expect(apiWrapper._inPeriod(isoNotBetween1)).to.be.false;
        expect(apiWrapper._inPeriod(isoNotBetween2)).to.be.false;
      });
  });

  describe("_afterStart", function () {
    it("should return true for dates after start date inclusive", function () {
      expect(apiWrapper._afterStart(isoBetween1)).to.be.true;
      expect(apiWrapper._afterStart(isoBetween2)).to.be.true;
      expect(apiWrapper._afterStart(isoBetween3)).to.be.true;
      expect(apiWrapper._afterStart(moment().toISOString())).to.be.true;
    });

    it("should return false for dates not between start and end inclusive",
      function () {
        expect(apiWrapper._afterStart(isoNotBetween2)).to.be.false;
      });
  });
});
