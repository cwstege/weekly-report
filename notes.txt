Table Schema
1. mailerByProject
  - projectId
  - email
2. response

Routes:
POST: initiate
What is our POST going look like.

Reporter:
GET: Their report based on token
POST: To post responses

Q: Does user get to revise answer?

Reviewer:
GET: Based on projectId

Template Lives on Server

Repo: Weekly Report

Walmart weekly feedback

Rails App Originally

Send out mailer to everyone with questionairre
Internal intelligence for management to know what's going on

What did you do last week
What are you blocked on
What are you doing

Convert to Node
Want to use for WM and Odin
Integrate with their system
Want to be decoupled

Odin will trigger and consume so it must be "siloed"

People from Harvest or TeamRosters (who is working on what project, assigned %)

Major Parts of System
- Worry about auth later
- Form for admin user that creates Questionairre (report template in 10-4 now)
- CronJob but will be done via API to create a new report
    - Will copy report JSON
    - React and Happy
    - MySQL data persist
    - WM to standup MySQL instance
- For report template and rendering of report move to React from backbone (form builder)
- Rendering from ERB to handlebars. Form can be server side rendered.

Process:
- Report template admin tool will edit. Questions, order, multiple choice, yes/no, etc
- API will hold report. Copy questions from report template.
- From report will be number of responses. Token at end of url that refers to response object

- Report

Last Week's Notes:

- weekly-report kickoff
    - goal: sparate questionairres and mailing from tenfour
    - features
        - handle separate orgs (tenants?)
        - report templates
            - questions
            - type of questions
            - everything required to format a web UI for email recipients to fill out responses
            - questionairre builder to create new
        - mailings sent out on schedule
            - internal or exernally scheduled?
        - accept and save user responses to questions
        - API
            - create new mailing
            - reporting
                - what was sent
                - what was responsed
                - who hasnt responded
    - tech stack
        - bcakend: nodejs, hapijs
        - frontend: reactjs
